/* Planning
      Header
        -Logo
        -Nav items(right side)
        -cart
      Body
        -Search Bar
        - Restaurant list
          -Restaurant card
            -Image
            -Nam
            -Rating
            -Tag
      footer
       -links
       -Copyrights
*/

1.)What is the difference between
Named
Export,
Default
export and
* as
export?

- In React ,we export modules or variables ,functioonal components to use in other part of our code or other module or code file.
-Named Export -we seperately export variables ,functions or classes using named export,we can export multiple values from a module.
- each names should be unique and imported using name of the exported item and inside the curly braces.

-Default Export - u want to export only one variable or main funciton from a module then ,we use default export.
-We can import it using any name without curly braces.

-* as obj > allow to import all exports from a module using * as someName.and later we can use this object to use any of our export.

2.)What is the importance of config.js file
- we use it for keep our code more readable and maintainable using all the constant thing in this file and then do named export to use it in other modules or code file.
- A config.js file, often named something like config.js or config.json, is a common practice in software development to store configuration settings and parameters for an application.
- it gives security to our app,like some sensitive data can be hide ,like API key,DB credentials.

3.)What are React Hooks?
- React Hooks are functions that allow you to use state and other React features in function components.
- they were introduced in React 16.8 to manage state in function components.
- They make it easier to reuse stateful logic across components.

4.) Why do we need a
useState
Hook?
- The useState Hook is an essential part of React Hooks, and it serves a crucial role in functional components by allowing them to manage and update local state.


Day 8 Tasks:-

1.) What is a Microservice?
- A microservice is a software architectural style that structures an application as a collection of small, loosely coupled services that can be developed, deployed, and scaled independently.
- each services can be developed and deployed independently.
- more scalable.like testing a feature of certain parts of app.
- each services communicate with each other using API.

2.)What is Monolith architecture?
- A monolithic architecture is a traditional software design approach where an entire application or system is built as a single.
- In a monolithic application, all the components and functionality, including the user interface, business logic, and data access layers, are packaged together into a single codebase and executed as a single application.
- scalablity is tough,deployement is tough.
- high chance of system failure.
- Difficulty in maintaining and evolving the application as the codebase grows.

3.)What is the difference between Monolith and Microservice?
-1.Monolith application build on single project folder,Microservices consist of different small components of our apps.
-2.deployment is easy in Microservice,Tough in monolith
-3.microservice components are independently can be developed,monolith not possible.
-4. monolith large code base,smaller different codebases.
-5.a single team works to build monolith app,different team involves to build the app.
-6. Techstack,in monolith only a single tech stack can be used.in microservice as per requiremnet we use tech stack
-7. scalablity,microservices based app are more scalable.
-8. fault tollerence,more fault in monolith.

4.) Why do we need a useEffect Hook?
- useEffect is a very important hook in react ,it is used to manage funcitonal components side effects after render the componet ,it can be of two type ,one with without dependency,so here once a component is rendered and then the useEffect hook applied,and other is giving dependency on a state variable ,if state of variable is changes then first redering and then the useEffect applies.
- useEffect is commonly used to fetch data from APIs or perform other asynchronous operations.

5.) What is Optional Chaining?
- Optional Chaining is new feature of modern JS,it is used to access properties and methods of an object.specially when object is nested .It helps in preventing the error like "cannot read property of x undefined"
-allowing you to access properties without explicitly checking for the existence of each object or property in the chain.

6.) What is Shimmer UI?
- Shimmer UI is just a placeholder for our page when our page is loading the data,it is being display to user ,in such way that content will come up there by using some virtical and horizontal line.It is best for user exprience ,instead of showing the empty page we will show a visual page of data that is being loading.

- Providing users with a clear indication that content is loading, which can reduce frustration.
- Mimicking the layout and structure of the actual content, making it easier for users to predict the final appearance.
- Offering a visually appealing and modern loading animation that keeps users engaged.

7.) What is the difference between JS expression and JS statement
-  the key difference between expressions and statements is that expressions produce values, while statements perform actions or control the flow of a program without necessarily producing values

8.) What is Conditional Rendering, explain with a code example
- Conditional redering in React is an important feature ,where we render certain component ,based on coditions.
for i.g we take a state variable loggedIn,and we will show the Login component,while loggedIn state is false.and we will show log out component when loggedIn state is true.

9.) What is CORS?
- CORS stands for Cross-Origin Resource Sharing, and it is a security feature implemented by web browsers to control and manage requests made to resources from a different origin or domain (i.e., a different website) in web applications. 
- CORS is an essential mechanism that helps prevent potentially malicious web pages from making unauthorized cross-origin requests to access sensitive data.
- CORS helps strike a balance between security and interoperability in web applications. It allows web developers to make cross-origin requests when necessary while ensuring that only trusted domains are permitted to access sensitive resources
- Servers can define fine-grained rules for which domains and methods are permitted, providing a level of control over the access to their resources.

10.) What is async and await?
- async and await are JavaScript keywords introduced in ECMAScript 2017 (ES8) that are used to simplify asynchronous programming, particularly when working with Promises. They make asynchronous code easier to read and write by allowing you to write asynchronous operations in a more synchronous and linear style. 

- it makes code more readable and easy to handle errors.more readable code and maintainable code.
- inside async function ,await is used with a promise .when promise will be resolved then only next line of code will be executed.like we used to do in our promise ,then ,catch block.just like that.
- async function always returns a promise. An async function always returns a Promise, either resolved with the function's return value or rejected with an error.
- It signals that the function contains asynchronous code.

11.) What is the use of `const json = await data.json();` in getRestaurants()
- The line of code const json = await data.json(); is used to parse and extract the JSON data from a response object received from an asynchronous operation, typically an HTTP request.

Day9: 
- useEffect - first component render then useEffect called.

-Using the react-router-dom for routing.
-create routes and based on route we redirect to that page.for creating the route ,import createBrowserRouter and then write the configuration inside it ,it is an type of function which takes the array as argument . 
-RouterProvider is the component to load the page which is needed ,<RouterProvider route={appRoute}
-react-router-dom provide Link name import ,for adding links and and don't refresh the page .
-Outlet is provided which is component which renders the certain component based on route.
-useParams for getting the url id of our route.

1.)What are various ways to add images into our App? Explain with code examples
- 1.) Inside HTML using <img scr="./img.jpeg" alt="Image" />
- 2.) Using img inside our JSX in React.
     const Component=()=>{
      return (
        <div><img src="" alt=""/></div>   
      )
     }
- 3.) using import inside React app.
   import Logo from "./components/assests/logo.jpeg"
   and use it in react component.
   const Component=()=>{
    return (
      <div>
      <img src={Logo}/>
      </div>
    )
   }
- 4.) Using You can set the background image of an element using CSS.
    const Component=()=>{
      const styleImg={
        backgroundImage:`url("")`,
        backgroundSize:"cover"
      }
      return (
        <div>
        <img styleImg={style}/>
        </div>
      )
    }

2.) What would happen if we do console.log(useState())?
- it will return a array with two element,first one is the current state value and second one is to update the state value.
  const [state,setState]=useState();

3.) How will useEffect behave if we don't add a dependency array ?
- If we don't add dependency array the it will run the effect every time after render.and it can go to infinite loops and a lot of API call and all.so we always provide the array as dependency.if array is empty then it will only run the effect after the initial render.

4.)What is SPA?
- SPA stands for Single Page Application. It's a type of web application or website that interacts with the user by dynamically rewriting the current page rather than loading entire new pages from the server
- In other words, the application's UI is updated dynamically as the user interacts with it, without requiring a full page reload.
- it gives smooth exprience and good .commonly build using React ,Angular ,Vue.js etc ,these library provides tools for building the client side apps.

5.)What is difference between Client Side Routing and Server Side Routing?
- Client-side routing and server-side routing refer to different approaches in managing and handling the navigation and rendering of pages in a web application.
- 1.) Client-side routing and server-side routing refer to different approaches in managing and handling the navigation and rendering of pages in a web application.
- 2.) Navigation on the Client: In client-side routing, the navigation and page rendering are handled on the client side (in the browser). When a user clicks a link or enters a URL, JavaScript in the client-side framework or library (e.g., React, Vue, Angular) intercepts the request and updates the DOM to display the new content without a full page reload.
- 3.) Fast and Responsive: Client-side routing provides a faster and more responsive user experience because only the necessary data is fetched from the server, and page transitions happen without reloading the entire page.
- 4.) JavaScript Heavy: Client-side routing relies heavily on JavaScript to manage navigation and rendering. The initial loading of the application may take longer, especially for larger applications.

Day 10- 
1.) How do you create Nested Routes react-router-dom cofiguration ?
- by providing path to the children in which we want another child and giving element as child of that children.and then using outlet in the parent of that child .

2.) What is the order of life cycle method calls in Class Based Components
- order of Life cycle method inclass component : 
1.)constructor method
2.)then render 
3.)componentDidMount
4.)Re-Render 
5.)ComponentWillUpdate
6.)ComponentWillUnmount

3.) Why do we use componentDidMount?
- componentDidMount is a lifecycle method in React, a popular JavaScript library for building user interfaces. It is used to perform actions after a component has been rendered to the DOM (Document Object Model). Here's why it is used: 
- useEffect Hook is introduced in functional component to do same thing ,like api call and all. it is more concise easier to understand.now componentDidMount is not used .

4.) Why do we use componentWillUnmount? Show with example
- componentWillUnmount is a lifecycle method in React that is used for performing cleanup or teardown operations just before a component is unmounted and removed from the DOM. 
- It's important for situations where you need to clean up resources, event listeners, subscriptions, or anything else that was set up in the component's lifecycle.

5.) Why do we use super(props) in constructor
- In JavaScript, when you create a subclass (child class) that extends a superclass (parent class) using the class syntax, you use the super keyword to call the constructor of the parent class. The super(props) call in the constructor of a subclass is used for a specific purpose in the context of React and class-based components:

6.) Why can't we have the callback function of useEffect async?
- Because useEffect expect to return a undefined or a cleanup function .which is being trigged when unmount will happen from dom.
- and async function always returns a promise ,so that is why we can't use async infront of our callback function.Otherwise it will disturb the behavior of the useEffect.
-useEffect either can return nothing or a cleanup function.
-that is why we can't use the async keyword at the front of the callback in useEffect.